name: CI Pipeline

on:
  push:
    paths-ignore:
      - "trace-viewer/**"
      - ".github/workflows/frontend.yml"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  doctest:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          poetry config installer.max-workers 10
          poetry install --no-interaction

      - name: install Sphinx
        run: sudo apt-get install python3-sphinx

      - name: run doctest
        env:
          AA_TOKEN: ${{ secrets.AA_TOKEN }}
          HUGGING_FACE_TOKEN: ${{ secrets.HUGGING_FACE_TOKEN }}
        run: ./scripts/doctest.sh

  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          poetry config installer.max-workers 10
          poetry install --no-interaction

      - name: set PY for pre-commit
        run: echo "PY=$(python -VV | sha256sum | cut -d' ' -f1)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit|${{ env.PY }}|${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Run linters
        run: |
          ./scripts/lint.sh

  test:
    runs-on: ubuntu-latest

    services:
      argilla-elastic-search:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.5.3
        env:
          ES_JAVA_OPTS: "-Xms512m -Xmx512m"
          discovery.type: "single-node"
          xpack.security.enabled: "false"
      argilla:
        image: argilla/argilla-server
        ports:
          - "6900:6900"
        env:
          ARGILLA_ELASTICSEARCH: "http://argilla-elastic-search:9200"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          poetry config installer.max-workers 10
          poetry install --no-interaction

      - name: Run pytest
        env:
          AA_TOKEN: ${{ secrets.AA_TOKEN }}
          HUGGING_FACE_TOKEN: ${{ secrets.HUGGING_FACE_TOKEN }}
          ARGILLA_API_URL: "http://localhost:6900/"
          ARGILLA_API_KEY: "argilla.apikey"
        run: |
          ./scripts/test.sh

  run-notebooks:
    runs-on: ubuntu-latest

    services:
      argilla-elastic-search:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.5.3
        env:
          ES_JAVA_OPTS: "-Xms512m -Xmx512m"
          discovery.type: "single-node"
          xpack.security.enabled: "false"
      argilla:
        image: argilla/argilla-server
        ports:
          - "6900:6900"
        env:
          ARGILLA_ELASTICSEARCH: "http://argilla-elastic-search:9200"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          poetry config installer.max-workers 10
          poetry install --no-interaction

      - name: Configure Poetry for notebooks and run
        env:
          AA_TOKEN: ${{ secrets.AA_TOKEN }}
          HUGGING_FACE_TOKEN: ${{ secrets.HUGGING_FACE_TOKEN }}
          ARGILLA_API_URL: "http://localhost:6900/"
          ARGILLA_API_KEY: "argilla.apikey"
        run: |
          ./scripts/notebook_runner.sh
