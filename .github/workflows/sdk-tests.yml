on:
  workflow_call:
    inputs:
      runner:
        type: string
        default: "ubuntu-latest"
      timeout:
        type: number
        default: 15 # mins

defaults:
  run:
    shell: bash

jobs:
  lint:
    timeout-minutes: ${{inputs.timeout}}
    runs-on: ${{inputs.runner}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - uses: ./.github/composites/python-setup

      - name: set PY for pre-commit
        run: echo "PY=$(python -VV | sha256sum | cut -d' ' -f1)" >> $GITHUB_ENV
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit|${{ env.PY }}|${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Run linters
        run: |
          ./scripts/lint.sh
  doctest:
    timeout-minutes: ${{inputs.timeout}}
    runs-on: ${{inputs.runner}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - uses: ./.github/composites/python-setup

      - name: Run doctest
        env:
          AA_TOKEN: ${{ secrets.AA_TOKEN }}
          HUGGING_FACE_TOKEN: ${{ secrets.HUGGING_FACE_TOKEN }}
          CLIENT_URL: ${{ secrets.CLIENT_URL }}
        run: ./scripts/doctest.sh

  test:
    timeout-minutes: ${{inputs.timeout}}
    runs-on: ${{inputs.runner}}
    services:
      argilla-elastic-search:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.12.2
        env:
          ES_JAVA_OPTS: "-Xms512m -Xmx512m"
          discovery.type: "single-node"
          xpack.security.enabled: "false"
      argilla:
        image: argilla/argilla-server:v1.29.1
        ports:
          - "6900:6900"
        env:
          ARGILLA_ELASTICSEARCH: "http://argilla-elastic-search:9200"
          ARGILLA_ENABLE_TELEMETRY: 0
      open-telemetry-trace-service:
        image: jaegertracing/all-in-one:1.35
        env:
          COLLECTOR_OTLP_ENABLED: "true"
        ports:
          - "4317:4317"
          - "4318:4318"
          - "16686:16686"
      trace-viewer:
        image: ghcr.io/aleph-alpha/trace-viewer-trace-viewer:main
        credentials:
          username: "unused"
          password: ${{ secrets.GH_PAT }}
        ports:
          - "3000:3000"
      postgres:
        image: postgres:15
        ports:
          - "5433:5432"
        env:
          POSTGRES_DB: "il_sdk"
          POSTGRES_USER: "il_sdk"
          POSTGRES_PASSWORD: "test"
      studio-backend:
        image: registry.gitlab.aleph-alpha.de/product/studio/backend:v0.0.65
        ports:
          - "8000:8000"
        env:
          POSTGRES_DB: "il_sdk"
          POSTGRES_USER: "il_sdk"
          POSTGRES_PASSWORD: "test"
          POSTGRES_HOST: "postgres"
          POSTGRES_PORT: "5432"

          AUTHORIZATION_SERVICE_URL: ${{ secrets.AUTHORIZATION_SERVICE_URL }}
          AA_TOKEN: ${{ secrets.AA_TOKEN }}
          API_SCHEDULER_URL: ${{ secrets.CLIENT_URL }}
          DATA_SERVICE_URL: ${{secrets.DATA_SERVICE_URL}}
        credentials:
          username: "unused"
          password: ${{ secrets.GL_STUDIO_CONTAINER_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - uses: ./.github/composites/python-setup

      - name: Run pytest
        env:
          POSTGRES_DB: "il_sdk"
          POSTGRES_USER: "il_sdk"
          POSTGRES_PASSWORD: "test"
          POSTGRES_HOST: "localhost"
          POSTGRES_PORT: "5433"

          AUTHORIZATION_SERVICE_URL: ${{ secrets.AUTHORIZATION_SERVICE_URL }}
          AA_TOKEN: ${{ secrets.AA_TOKEN }}
          DATA_SERVICE_URL: ${{secrets.DATA_SERVICE_URL}}

          HUGGING_FACE_TOKEN: ${{ secrets.HUGGING_FACE_TOKEN }}
          ARGILLA_API_URL: "http://localhost:6900/"
          ARGILLA_API_KEY: "argilla.apikey"
          CLIENT_URL: ${{ secrets.CLIENT_URL }}
          STUDIO_URL: "http://localhost:8000/"
          DOCUMENT_INDEX_URL: ${{secrets.DOCUMENT_INDEX_URL}}
          PHARIA_KERNEL_URL: https://pharia-kernel.product.pharia.com
        run: |
          ./scripts/test.sh
  run-notebooks:
    timeout-minutes: ${{inputs.timeout}}
    runs-on: ${{inputs.runner}}
    services:
      argilla-elastic-search:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.12.2
        env:
          ES_JAVA_OPTS: "-Xms512m -Xmx512m"
          discovery.type: "single-node"
          xpack.security.enabled: "false"
      argilla:
        image: argilla/argilla-server:v1.29.1
        ports:
          - "6900:6900"
        env:
          ARGILLA_ELASTICSEARCH: "http://argilla-elastic-search:9200"
          ARGILLA_ENABLE_TELEMETRY: 0
      postgres:
        image: postgres:15
        ports:
          - "5433:5432"
        env:
          POSTGRES_DB: "il_sdk"
          POSTGRES_USER: "il_sdk"
          POSTGRES_PASSWORD: "test"
      studio-backend:
        image: registry.gitlab.aleph-alpha.de/product/studio/backend:v0.0.65
        ports:
          - "8001:8000"
        env:
          POSTGRES_DB: "il_sdk"
          POSTGRES_USER: "il_sdk"
          POSTGRES_PASSWORD: "test"
          POSTGRES_HOST: "postgres"
          POSTGRES_PORT: "5432"

          AUTHORIZATION_SERVICE_URL: ${{ secrets.AUTHORIZATION_SERVICE_URL }}
          AA_TOKEN: ${{ secrets.AA_TOKEN }}
          API_SCHEDULER_URL: ${{ secrets.CLIENT_URL }}
          DATA_SERVICE_URL: ${{secrets.DATA_SERVICE_URL}}
        credentials:
          username: "unused"
          password: ${{ secrets.GL_STUDIO_CONTAINER_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - uses: ./.github/composites/python-setup

      - name: Run Notebooks
        env:
          AA_TOKEN: ${{ secrets.AA_TOKEN }}
          HUGGING_FACE_TOKEN: ${{ secrets.HUGGING_FACE_TOKEN }}
          ARGILLA_API_URL: "http://localhost:6900/"
          ARGILLA_API_KEY: "argilla.apikey"
          CLIENT_URL: ${{ secrets.CLIENT_URL }}
          STUDIO_URL: "http://localhost:8001"
          DOCUMENT_INDEX_URL: ${{secrets.DOCUMENT_INDEX_URL}}
        run: |
          ./scripts/notebook_runner.sh
  document-index:
    timeout-minutes: ${{inputs.timeout}}
    runs-on: ${{inputs.runner}}
    continue-on-error: true
    env:
      DOCUMENT_INDEX_URL: ${{secrets.DOCUMENT_INDEX_URL}}
      AA_TOKEN: ${{ secrets.AA_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - uses: ./.github/composites/python-setup
      - name: Run client tests
        run: |
          TQDM_DISABLE=1 poetry run pytest -m "document_index and not asyncio"
      - name: Run async client tests
        run: |
          TQDM_DISABLE=1 poetry run pytest -m "document_index and asyncio"
