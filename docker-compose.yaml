services:
  # taken from https://docs.argilla.io/latest/getting_started/how-to-deploy-argilla-with-docker/
  argilla-elastic-search:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.2
    environment:
      - node.name=elasticsearch
      - cluster.name=es-argilla-local
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - cluster.routing.allocation.disk.threshold_enabled=false
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
      - "9300:9300"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --silent --fail localhost:9200/_cluster/health || exit 1",
        ]
      interval: 5s
      timeout: 5s
      retries: 3
  argilla:
    depends_on:
      argilla-elastic-search:
        condition: service_healthy
    image: argilla/argilla-server:v1.29.1
    ports:
      - "6900:6900"
    environment:
      ARGILLA_ELASTICSEARCH: "http://argilla-elastic-search:9200"
      ARGILLA_ENABLE_TELEMETRY: 0

      USERNAME: argilla
      PASSWORD: 12345678
      API_KEY: argilla.apikey
  open-telemetry-trace-service:
    container_name: jaeger_1_35
    environment:
      COLLECTOR_OTLP_ENABLED: "true"
    ports:
      - "4317:4317"
      - "4318:4318"
      - "16686:16686"
    image: jaegertracing/all-in-one:1.35
  # export GITHUB_TOKEN=...
  # echo $GITHUB_TOKEN | docker login ghcr.io -u your_email@for_github --password-stdin
  # docker compose pull to update containers

  # export GITLAB_TOKEN=...
  # (optional) export GITLAB_TOKEN=$(op item get YOUR_TOKEN --format json --fields password | jq .value | tr -d '"')
  # echo $GITLAB_TOKEN | docker login registry.gitlab.aleph-alpha.de -u your_email@for_gitlab --password-stdin
  # docker compose pull to update containers
  studio-backend:
    image: registry.gitlab.aleph-alpha.de/product/studio/backend:v0.2.6
    ports:
      - 8000:8000
    depends_on:
      postgres:
        condition: service_started
        restart: true
    env_file: ".env" # mainly for AA-TOKEN, DB User/PW
    environment:
      POSTGRES_HOST: postgres
      API_SCHEDULER_URL: ${CLIENT_URL}
  postgres:
    image: postgres:15
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    env_file: ".env"
    command: -p ${POSTGRES_PORT}
