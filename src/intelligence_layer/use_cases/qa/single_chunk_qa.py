from typing import Mapping, Optional, Sequence

from liquid import Template
from pydantic import BaseModel

from intelligence_layer.core import Task, TaskSpan
from intelligence_layer.core.chunk import Chunk
from intelligence_layer.core.detect_language import Language, language_config
from intelligence_layer.core.model import (
    CompleteInput,
    CompleteOutput,
    ControlModel,
    LuminousControlModel,
)
from intelligence_layer.core.prompt_template import RichPrompt
from intelligence_layer.core.text_highlight import TextHighlight, TextHighlightInput


class QaSetup(BaseModel):
    unformatted_instruction: str
    no_answer_str: str


QA_INSTRUCTIONS = {
    Language("en"): QaSetup(
        unformatted_instruction='{{question}}\nIf there\'s no answer, say "{{no_answer_text}}". Only answer the question based on the text.',
        no_answer_str="no answer in text",
    ),
    Language("de"): QaSetup(
        unformatted_instruction='{{question}}\nWenn es keine Antwort gibt, gib "{{no_answer_text}}" aus. Beantworte die Frage nur anhand des Textes.',
        no_answer_str="keine Antwort im Text",
    ),
    Language("fr"): QaSetup(
        unformatted_instruction="{{question}}\nS'il n'y a pas de réponse, dites \"{{no_answer_text}}\". Ne répondez à la question qu'en vous basant sur le texte.",
        no_answer_str="pas de réponse dans le texte",
    ),
    Language("es"): QaSetup(
        unformatted_instruction='{{question}}\nSi no hay respuesta, di "{{no_answer_text}}". Responde sólo a la pregunta basándote en el texto.',
        no_answer_str="no hay respuesta en el texto",
    ),
    Language("it"): QaSetup(
        unformatted_instruction='{{question}}\nSe non c\'è risposta, dire "{{no_answer_text}}". Rispondere alla domanda solo in base al testo.',
        no_answer_str="nessuna risposta nel testo",
    ),
}


class SingleChunkQaInput(BaseModel):
    """The input for a `SingleChunkQa` task.

    Attributes:
        chunk: The (short) text to be asked about. Usually measures one or a few paragraph(s).
            Can't be longer than the context length of the model used minus the size of the system prompt.
        question: The question to be asked by about the chunk.
        language: The desired language of the answer. ISO 619 str with language e.g. en, fr, etc.
    """

    chunk: Chunk
    question: str
    language: Language = Language("en")


class SingleChunkQaOutput(BaseModel):
    """The output of a `SingleChunkQa` task.

    Attributes:
        answer: The answer generated by the task. Can be a string or None (if no answer was found).
        highlights: Highlights indicating which parts of the chunk contributed to the answer.
            Each highlight is a quote from the text.
    """

    answer: Optional[str]
    highlights: Sequence[str]


class SingleChunkQa(Task[SingleChunkQaInput, SingleChunkQaOutput]):
    """Answer a question on the basis of one chunk.

    Uses Aleph Alpha models to generate a natural language answer for a text chunk given a question.
    Will answer `None` if the language model determines that the question cannot be answered on the
    basis of the text.

    Args:
        model: The model used throughout the task for model related API calls.
    Attributes:
        NO_ANSWER_STR: The string to be generated by the model in case no answer can be found.


    Example:
        >>> import os
        >>> from intelligence_layer.core import Language, InMemoryTracer
        >>> from intelligence_layer.core import Chunk
        >>> from intelligence_layer.use_cases import SingleChunkQa, SingleChunkQaInput
        >>>
        >>> task = SingleChunkQa()
        >>> input = SingleChunkQaInput(
        ...     chunk=Chunk("Tina does not like pizza. However, Mike does."),
        ...     question="Who likes pizza?",
        ...     language=Language("en"),
        ... )
        >>> tracer = InMemoryTracer()
        >>> output = task.run(input, tracer)
    """

    def __init__(
        self,
        model: ControlModel = LuminousControlModel("luminous-supreme-control-20240215"),
        text_highlight: TextHighlight = TextHighlight(
            LuminousControlModel("luminous-base-control-20240215")
        ),
        instruction_config: Mapping[Language, QaSetup] = QA_INSTRUCTIONS,
        maximum_tokens: int = 64,
    ):
        super().__init__()
        self._model = model
        self._text_highlight = text_highlight
        self._instruction_config = instruction_config
        self._maximum_tokens = maximum_tokens

    def do_run(
        self, input: SingleChunkQaInput, task_span: TaskSpan
    ) -> SingleChunkQaOutput:
        qa_setup = language_config(input.language, self._instruction_config)

        output, prompt = self._generate_answer(
            Template(qa_setup.unformatted_instruction).render(
                question=input.question, no_answer_text=qa_setup.no_answer_str
            ),
            input.chunk,
            task_span,
        )

        answer = self._no_answer_to_none(
            output.completion.strip(), qa_setup.no_answer_str
        )

        highlights = (
            self._get_highlights(
                prompt,
                output.completion,
                task_span,
            )
            if answer
            else []
        )
        return SingleChunkQaOutput(
            answer=answer,
            highlights=highlights,
        )

    def _generate_answer(
        self, instruction: str, input: str, task_span: TaskSpan
    ) -> tuple[CompleteOutput, RichPrompt]:
        prompt = self._model.to_instruct_prompt(instruction, input)
        return (
            self._model.complete(
                CompleteInput(
                    prompt=prompt,
                    maximum_tokens=self._maximum_tokens,
                ),
                task_span,
            ),
            prompt,
        )

    def _get_highlights(
        self,
        rich_prompt: RichPrompt,
        completion: str,
        task_span: TaskSpan,
    ) -> Sequence[str]:
        highlight_input = TextHighlightInput(
            rich_prompt=rich_prompt,
            target=completion,
            focus_ranges=frozenset({"input"}),
        )
        highlight_output = self._text_highlight.run(highlight_input, task_span)
        return [h.text for h in highlight_output.highlights if h.score > 0]

    def _no_answer_to_none(self, completion: str, no_answer_str: str) -> Optional[str]:
        return completion if no_answer_str not in completion else None
