"""Single Chunk QA

This module demonstrates methodology for LLM-based question-answering on the basis of short documents.

Example:
    >>> client = Client(token="YOUR_AA_TOKEN")
    >>> task = SingleChunkQa(client)
    >>> input = SingleChunkQaInput(
    >>>     chunk="Tina does not like pizza. However, Mike does.",
    >>>     question="Who likes pizza?"
    >>> )
    >>> logger = InMemoryLogger(name="QA")
    >>> output = task.run(input, logger)
    >>> print(output.answer)
    Mike likes pizza.

"""

from typing import Optional, Sequence
from aleph_alpha_client import (
    Client,
    CompletionRequest,
    Prompt,
)
from pydantic import BaseModel

from intelligence_layer.completion import Completion, CompletionInput, CompletionOutput
from intelligence_layer.text_highlight import (
    TextHighlight,
    TextHighlightInput,
)
from intelligence_layer.prompt_template import (
    PromptTemplate,
    PromptWithMetadata,
)
from intelligence_layer.task import (
    DebugLogger,
    Task,
)


class SingleChunkQaInput(BaseModel):
    """The input for a single chunk QA task.

    Attributes:
        chunk: The (short) text to be asked about.
        question: The question being asked.
        
    """

    chunk: str
    question: str


class SingleChunkQaOutput(BaseModel):
    """The output of a single chunk QA task.

    Attributes:
        answer: The answer generated by the task. Can be a string or None (if no answer was found).
        highlights: Highlights using explainability which parts of the chunk contributed to the answer. Each highlight is a quote from the text.
        
    """

    answer: Optional[str]
    highlights: Sequence[str]


class SingleChunkQa(Task[SingleChunkQaInput, SingleChunkQaOutput]):
    """Task implementation for answering a question based on a single chunk.

    Depends on SingleChunkQaInput and SingleChunkQaOutput. Uses Aleph Alpha models to generate a natural language answer for a text chunk.

    Includes logic to return 'answer = None' if the language model determines that the question cannot be answered on the basis of the ctext.

    Note:
        'model' provided should be a control-type model.

    Args:
        client: Aleph Alpha client instance for running model related API calls.
        model: A valid Aleph Alpha model name.

    Attributes:
        PROMPT_TEMPLATE_STR: The prompt template used for answering the question. 'chunk' and 'question' will be inserted here. Includes liquid logic interpreted by 'PromptTemplate':
        NO_ANSWER_STR: The string to be generated by the model in case no answer can be found.
        client: Aleph Alpha client instance for running model related API calls.
        model: A valid Aleph Alpha model name.
        completion: A Completion Task that takes care of running completions against the API.
        text_highlight: A TextHighlight Task that generates explainability highlights.
        
    """

    PROMPT_TEMPLATE_STR = """### Instruction:
{{question}}
If there's no answer, say "{{no_answer_text}}".

### Input:
{% promptrange text %}{{text}}{% endpromptrange %}

### Response:"""
    NO_ANSWER_STR = "NO_ANSWER_IN_TEXT"

    def __init__(
        self,
        client: Client,
        model: str = "luminous-supreme-control",
    ):
        self.client = client
        self.model = model
        self.completion = Completion(client)
        self.text_highlight = TextHighlight(client)

    def run(
        self, input: SingleChunkQaInput, logger: DebugLogger
    ) -> SingleChunkQaOutput:
        """Actually runs the SingleChunkQA logic to generate results.

        First, generates a 'prompt_with_metadata', which holds the actual 'Prompt' and range information, which is used later to generate highlights.
        Then, completes the prompt using the pre-specified model. Last, highlights are generated given the prompt, chunk and generated completion.
    
        Args:
            input: xxx.
            logger: xxx.

        Returns:
            xxx
            
        """

        prompt_with_metadata = self._to_prompt_with_metadata(
            input.chunk, input.question
        )
        output = self._complete(
            prompt_with_metadata.prompt, logger.child_logger("Generate Answer")
        )
        highlights = self._get_highlights(
            prompt_with_metadata,
            output.completion(),
            logger.child_logger("Explain Answer"),
        )
        return SingleChunkQaOutput(
            answer=self._no_answer_to_none(output.completion().strip()),
            highlights=highlights,
        )

    def _to_prompt_with_metadata(self, text: str, question: str) -> PromptWithMetadata:
        template = PromptTemplate(self.PROMPT_TEMPLATE_STR)
        return template.to_prompt_with_metadata(
            text=text, question=question, no_answer_text=self.NO_ANSWER_STR
        )

    def _complete(self, prompt: Prompt, logger: DebugLogger) -> CompletionOutput:
        request = CompletionRequest(prompt)
        output = self.completion.run(
            CompletionInput(request=request, model=self.model), logger
        )
        return output

    def _get_highlights(
        self,
        prompt_with_metadata: PromptWithMetadata,
        completion: str,
        logger: DebugLogger,
    ) -> Sequence[str]:
        highlight_input = TextHighlightInput(
            prompt_with_metadata=prompt_with_metadata,
            target=completion,
            model=self.model,
        )
        highlight_output = self.text_highlight.run(highlight_input, logger)
        return [h.text for h in highlight_output.highlights if h.score > 0]

    def _no_answer_to_none(self, completion: str) -> Optional[str]:
        return completion if completion != self.NO_ANSWER_STR else None
